// <auto-generated />
using System;
using GreenPlace.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreenPlace.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GreenPlace.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Pizza"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Burger"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Salad"
                        });
                });

            modelBuilder.Entity("GreenPlace.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GreenPlace.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("GreenPlace.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllergyInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProductOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AllergyInformation = "",
                            CategoryId = 1,
                            ImageThumbnailUrl = "http://www.pizza-ok.ro/wp-content/uploads/2016/04/4stagioni2.jpg",
                            ImageUrl = "http://www.pizza-ok.ro/wp-content/uploads/2016/04/4stagioni2.jpg",
                            InStock = true,
                            IsProductOfTheWeek = true,
                            LongDescription = "PIZZA QUATTRO STAGIONI is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Quattro Stagioni Pizza",
                            Price = 12.95m,
                            ShortDescription = "Our famous pizza"
                        },
                        new
                        {
                            ProductId = 2,
                            AllergyInformation = "",
                            CategoryId = 2,
                            ImageThumbnailUrl = "http://www.howsweeteats.com/wp-content/uploads/2011/04/bbqburgers-6.jpg",
                            ImageUrl = "http://www.howsweeteats.com/wp-content/uploads/2011/04/bbqburgers-6.jpg",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "CHICKEN BURGER is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Chicken Burger",
                            Price = 18.95m,
                            ShortDescription = "You'll love it!"
                        },
                        new
                        {
                            ProductId = 3,
                            AllergyInformation = "",
                            CategoryId = 2,
                            ImageThumbnailUrl = "https://img1.cookinglight.timeinc.net/sites/default/files/styles/4_3_horizontal_-_900x694/public/image/2016/05/main/1605p115-mushroom-beef-burger.jpg?itok=xGgGfd2h",
                            ImageUrl = "https://img1.cookinglight.timeinc.net/sites/default/files/styles/4_3_horizontal_-_900x694/public/image/2016/05/main/1605p115-mushroom-beef-burger.jpg?itok=xGgGfd2h",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "BEEF BURGER is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Beef Burger",
                            Price = 18.95m,
                            ShortDescription = "Plain beef burger. Plain pleasure."
                        },
                        new
                        {
                            ProductId = 4,
                            AllergyInformation = "",
                            CategoryId = 2,
                            ImageThumbnailUrl = "https://bdnmb.ca/wp-content/uploads/2019/09/burger-2762431_960_720.jpg",
                            ImageUrl = "https://bdnmb.ca/wp-content/uploads/2019/09/burger-2762431_960_720.jpg",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "DOUBLE SUMMER BURGER is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Double Summer Burger",
                            Price = 15.95m,
                            ShortDescription = "A summer classic!"
                        },
                        new
                        {
                            ProductId = 5,
                            AllergyInformation = "",
                            CategoryId = 3,
                            ImageThumbnailUrl = "https://www.fifteenspatulas.com/wp-content/uploads/2011/10/Caesar-Salad-Fifteen-Spatulas-3.jpg",
                            ImageUrl = "https://www.fifteenspatulas.com/wp-content/uploads/2011/10/Caesar-Salad-Fifteen-Spatulas-3.jpg",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "CAESAR SALAD is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Caesar Salad",
                            Price = 13.95m,
                            ShortDescription = "Happy holidays with this salad!"
                        },
                        new
                        {
                            ProductId = 6,
                            AllergyInformation = "",
                            CategoryId = 3,
                            ImageThumbnailUrl = "https://media4.s-nbcnews.com/j/newscms/2019_20/1437505/chinatown_chicken_salad_7db57f6a1845004c274840d39ce2b31c.today-inline-large.jpg",
                            ImageUrl = "https://media4.s-nbcnews.com/j/newscms/2019_20/1437505/chinatown_chicken_salad_7db57f6a1845004c274840d39ce2b31c.today-inline-large.jpg",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "CHICKEN SALAD is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Chicken Salad",
                            Price = 17.95m,
                            ShortDescription = "A favorite salad"
                        },
                        new
                        {
                            ProductId = 8,
                            AllergyInformation = "",
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://d1bjorv296jxfn.cloudfront.net/s3fs-public/styles/recipes_header_image/public/recipe-images/sargento/789-TuscanCKpizza.jpg?itok=hTgzOd0o",
                            ImageUrl = "https://d1bjorv296jxfn.cloudfront.net/s3fs-public/styles/recipes_header_image/public/recipe-images/sargento/789-TuscanCKpizza.jpg?itok=hTgzOd0o",
                            InStock = true,
                            IsProductOfTheWeek = true,
                            LongDescription = "CHICKEN PIZZA is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Chicken Pizza",
                            Price = 12.95m,
                            ShortDescription = "Our Chicken favorite"
                        },
                        new
                        {
                            ProductId = 9,
                            AllergyInformation = "",
                            CategoryId = 1,
                            ImageThumbnailUrl = "http://latavi.ro/wp-content/uploads/2018/03/pizza-cu-salam.jpg",
                            ImageUrl = "http://latavi.ro/wp-content/uploads/2018/03/pizza-cu-salam.jpg",
                            InStock = true,
                            IsProductOfTheWeek = true,
                            LongDescription = "PIZZA DIAVOLA is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Pizza Diavola",
                            Price = 15.95m,
                            ShortDescription = "My God, so spicy!"
                        },
                        new
                        {
                            ProductId = 10,
                            AllergyInformation = "",
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://www.naneti.ro/wp-content/uploads/2018/12/pizza-gourmet-capriciosa-naneti-1500x1000.jpg",
                            ImageUrl = "https://www.naneti.ro/wp-content/uploads/2018/12/pizza-gourmet-capriciosa-naneti-1500x1000.jpg",
                            InStock = true,
                            IsProductOfTheWeek = false,
                            LongDescription = "PIZZA CAPRICIOSA is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Pizza Capriciosa",
                            Price = 15.95m,
                            ShortDescription = "Our delicious capriciosa pizza!"
                        },
                        new
                        {
                            ProductId = 11,
                            AllergyInformation = "",
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://i.ytimg.com/vi/1pVqlEBmPJU/maxresdefault.jpg",
                            ImageUrl = "https://i.ytimg.com/vi/1pVqlEBmPJU/maxresdefault.jpg",
                            InStock = false,
                            IsProductOfTheWeek = false,
                            LongDescription = "CHEESE PIZZA is typically prepared using artichokes, tomatoes or basil, mushrooms, and ham or prosciutto, or olives. The artichokes represent spring, tomatoes or basil represent summer, mushrooms represent autumn and the ham or olives represent winter. Other ingredients may also be used. It is typically prepared using a tomato sauce and cheese. Fresh-cooked or canned artichoke hearts may be used. Some of the topping ingredients can first be dried in an oven to reduce their moisture, which prevents the pizza from being soggy when finished. Baking it on a pizza stone can also prevent sogginess. It may be finished with olive oil drizzled atop the pizza. The pizza can be sliced into wedges or by its four sections. Pizza quattro stagioni can be prepared as a vegetarian dish by substituting ham with a vegetarian option.",
                            Name = "Cheese Pizza",
                            Price = 18.95m,
                            ShortDescription = "You'll love it!"
                        });
                });

            modelBuilder.Entity("GreenPlace.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GreenPlace.Models.OrderDetail", b =>
                {
                    b.HasOne("GreenPlace.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenPlace.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenPlace.Models.Product", b =>
                {
                    b.HasOne("GreenPlace.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreenPlace.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("GreenPlace.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
